/*
Write a program that uses functions to perform the following operations on singly linked
list.:
i) Creation 
ii) Insertion 
iii) Deletion
 iv) Traversal
#include <stdio.h>
#include <stdlib.h>
*/

struct node {

	int data;
	struct node *link;
};

struct node *head = NULL, *tail = NULL, *cur, *next, *prev;

//1.function for creating a node.

void create_a_node() {

	int n ;
	printf("ENTER THE NUMBER OF NODES REQUIRED:\n");
	scanf("%d",&n);

	for(int i = 0; i < n; i ++) {

		cur = (struct node*)malloc(sizeof(struct node));
		printf("Enter the node data:\n");
		scanf("%d",&cur->data);

		cur->link = NULL;

		if(head == NULL) {
			head = tail = cur;
		}
		else{
			tail->link = cur;
			tail = cur;
		}
	}
}

//FUNCTIONS TO INSERT A NODE

//2.Inserting a node at the beginning

void insert_node_beginning() {

	cur = (struct node*)malloc(sizeof(struct node));

	printf("ENTER THE NODE DATA TO BE INSERTED AT THE BEGINNING:\n");

	scanf("%d",&cur->data);

	cur->link = head;
	head = cur;
}

//3.Inserting a node at the end.

void insert_node_end() {

	cur = (struct node*)malloc(sizeof(struct node));
	printf("ENTER THE NODE DATA TO BE INSERTED AT THE END:\n");
	scanf("%d",&cur->data);
	cur->link = NULL;
	tail->link = cur;
	tail = cur;
}

//4.Inserting a node at a given position.

void insert_node_position() {

	int pos,c;

	cur = (struct node*)malloc(sizeof(struct node));
	printf("\nENTER THE DATA OF THE NODE:\n");
	scanf("%d",&cur->data);

	next = head;
	printf("\nENTER THE POSITION WHERE THE NODE SHOULD BE INSERTED:\n");
	scanf("%d",&pos);

	c = 1;

	while(c < pos) {

		prev = next;
		next = next->link;
		c++;

	}
	prev->link = cur;
	cur->link = next;

}

//5.Insertion before a given node.

void insert_node_before_node() {

	int value;
	cur = (struct node*)malloc(sizeof(struct node));
	printf("\nENTER THE DATA OF THE NODE:\n");
	scanf("%d",&cur->data);

	printf("\nENTER THE VALUE BEFORE WHICH THE NODE SHOULD BE INSERTED:\n");
	scanf("%d",&value);

	next = head;

	while(next->data != value && next != NULL) {

		prev = next;
		next = next->link;
	}
	prev->link = cur;
	cur->link = next;
}

//6.Insertion after a given node.

void insert_node_after_node() {

	int value;
	cur = (struct node*)malloc(sizeof(struct node));
	printf("\nENTER THE DATA OF THE NODE:\n");
	scanf("%d",&cur->data);

	printf("ENTER THE VALUE AFTER WHICH THE NODE SHOULD BE INSERTED:");
	scanf("%d",&value);

	next = head;

	while(next->data != value && next != NULL) {

		next = next->link;

	}
	cur->link = next->link;
	next->link = cur;

}

//FUNCTIONS TO DELETE A NODE.

//7.delete at the beginning.

void delete_node_begin() {

	cur = head;
	head = cur->link;
	cur->link = NULL;

	printf("DELETED ELEMENT IS %d",cur->data);

	free(cur);
}

//8.delete at the end.

void delete_node_end() {

	cur = head;
	while(cur->link != tail)
		cur = cur->link;

	cur->link = NULL;	//DOUBT
	next = tail;

	printf("DELETED ELEMENT IS %d",tail->data);

	free(next);
	tail = cur;
}


//9.delete at a given position

void delete_node_position() {

	int pos, c = 1;

	printf("\nENTER THE POSITION OF DELETION:\n");
	scanf("%d",&pos);

	next = head;
	while(c < pos) {

		prev = next;
		next = next->link;
		c++;
	}
	prev->link = next->link;
	printf("DELETED ELEMENT IS %d",next->data);

	next->link = NULL;
	free(next);
}

//10.delete before a given node.

void delete_node_before_node() {

	int value;
	next = head;

	printf("\nENTER THE VALUE OF THE DATA BEFORE WHICH THE NODE SHOULD BE DELETED:\n");
	scanf("%d",&value);

	while(next->link->data != value) {

		prev = next;
		next = next->link;
	}
	prev->link = next->link;
	next->link = NULL;
	printf("\nDELETED ELEMENT IS %d\n",next->data);
	free(next);

}

//11.delete after a given node

void delete_node_after_node() {

	int value;
	
	printf("\nENTER THE VALUE OF THE DATA AFTER WHICH THE NODE SHOULD BE DELETED:\n");
	scanf("%d",&value);

	next = head;

	while(next->data != value) {

		prev = next;
		next = next->link;

	}
	prev = next->link;
	next->link = prev->link;
	printf("DELETED DATA IS %d",prev->data);
	prev->link = NULL;
	free(prev);
}

//12.function the display the elements.
void display() {

	if(head == NULL) {
		printf("List is empty");
	}else {
		next = head;
		printf("THE DATA ELEMENTS ARE:\n");
		while(next != NULL) {
			printf("%d----->",next->data);
			next = next->link;
		}
	}
}

//13.function to reverse the linked list.
void reverse() {
	prev = 0;
	cur = next = head;
	while(next != 0) {
		next = next->link;
		cur->link = prev;
		prev = cur;
		cur = next;
	}
	head = prev;
	printf("\nAFTER REVERSING ");
	display();
}

//14.function for sorting the linked list.
void sorting() {
	int c = 0, t;
	struct node *p1, *p2;

	p1 = head;

	while(p1 != NULL) {
		c++;
		p1 = p1->link;
	}
	for(int i = 0; i < c ; i ++) {
		p2 = head;
		while(p2->link != NULL) {
			if(p2->data > p2->link->data) {
				t = p2->data;
				p2->data = p2->link->data;
				p2->link->data = t;
			}
			p2 = p2->link;
		}
	}

	display();
}

void search(int num,struct node *head){
    struct node *ptr = NULL;
    ptr = head;
    while(ptr != NULL) {
        if(ptr->data == num) {
            printf("ELEMENT FOUND\n");
            return;
        }
        ptr = ptr->link;
    }
    printf("ELEMENT NOT FOUND");
    
}



int main(void) {
    
    int n;

	int ch;
	while(1) {
		printf("\n************************************\n");

		printf("FUNCTIONS FOR SINGLE LINKED LIST :");

		printf("\n");

		printf("1  -  create\n2  -  insert a node at the beginning\n3  -  insert a node at the end\n"
				"4  -  insert node at position\n5  -  insert a node before another node having a value\n"
				"6  -  insert a node after another having value\n7  -  delete node at the beginning\n"
				"8  -  delete node at the end\n9  -  delete node at a position\n10 -  delete node before another node having value\n"
				"11 -  delete a node after a given node\n12 -  display the data in the nodes\n"
				"13 -  reverse all the nodes\n14 -  sorting\n15 -  search for a element\n");

		printf("ENTER YOUR CHOICE");
		printf("\n\n");
		scanf("%d",&ch);
		switch(ch) {

		case 1: create_a_node();
				break;
		case 2:insert_node_beginning();
				break;
		case 3:	insert_node_end();
				break;
		case 4:	insert_node_position();
				break;
		case 5:	insert_node_before_node();
				break;
		case 6:insert_node_after_node();
				break;
		case 7:delete_node_begin();
				break;
		case 8:delete_node_end();
				break;
		case 9:delete_node_position();
				break;
		case 10:delete_node_before_node();
				break;
		case 11:delete_node_after_node();
				break;
		case 12: display();
				break;
		case 13:reverse();
				break;
		case 14:sorting();
				break;
		case 15:printf("ENTER THE ELEMENT TO BE SEARCHED\n");
		        scanf("%d",&n);
		        search(n,head);
			break;

		case 16 : exit(0);


		}
	}
}

